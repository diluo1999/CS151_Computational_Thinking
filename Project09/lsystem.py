# lsystem.py
# Di Luo
# CS 151 Fall 2018
# Project 9: Unique Trees and Shapes
# Version 3

import sys
import random

class Lsystem:
    def __init__(self, filename = None):
        ''' Initialize an empty L-system by importing base and rules of a L-system from a file if exists,
        the rules are stored in an dictionary'''
        self.base = ''
        self.rules = {}
        if filename != None:
            self.read(filename)
    
    def setBase(self, newbase):
        '''Set self.base with a new base'''
        self.base = newbase

    def getBase(self):
        '''Get method for base'''
        return self.base

    def getRule(self, index):
        '''Get method for rule in self.rules'''
        return self.rules[index]
    
    def addRule(self, newrule):
        '''Add new rule to self.rules'''
        self.rules[ newrule[0] ] = newrule[1:]

    def numRules(self):
        '''Count the number of rules in self.rules'''
        return len(self.rules)

    def read( self, filename ):
        '''Open the file, read in the Lsystem information, reset the base and rules fields of self, 
        and then store the information from the file in the appropriate fields'''
        fp = open(filename, 'r')
        for line in fp:
            words = line.split()
            if words[0] == 'base':
                self.setBase(words[1])
            elif words[0] == 'rule':
                self.addRule(words[1:])
        fp.close()

    def replace(self, istring):
        '''Scan through the string, and for each character test if there is a rule. 
        If a rule exists, add the random chosen replacement in the dictionary to a new string, 
        If no rule matches, add the character itself to the new string'''
        tstring = ''
        for c in istring:
            if c in self.rules:
                tstring += random.choice(self.rules[c])
            else:
                tstring += c
        return tstring
    
    def buildString(self, iterations):
        ''' Return a string generated by applying the L-system rules for a number of iterations '''
        nstring = self.base
        for i in range(iterations):
            nstring = self.replace(nstring)
        return nstring