# lsystem.py
# Di Luo
# CS 151 Fall 2018
# Project 7: Fractals and Trees

import sys

def init():
    ''' Return an empty L-system '''
    emptyString = ''
    emptyList = []
    emptyLsystem = [emptyString, emptyList]
    return emptyLsystem

def setBase(lsys,base):
    ''' Set the base of L-system list stored in lsys.
    base is a string '''
    lsys[0] = base

def addRule( lsys, newrule ):
    ''' Add a rule to the L-system list stored in lsys.
    newrule is a list of 2 strings '''
    lsys[1].append(newrule)

def getBase( lsys ):
    ''' Return the base string of this L-system '''
    return lsys[0]

def getRule( lsys, ruleIdx ):
    ''' Return the rule in position ruleIdx of this L-system '''
    return lsys[1][ruleIdx]

def createLsystemFromFile( filename ):
    ''' Create an L-system list by reading in the specified file '''

    lsys = init()
    
    fp = open(filename, "r")

    for line in fp:
        if line != '':
            lineString = line.split()
            if lineString[0] == 'base':
                setBase(lsys,lineString[1])
            elif lineString[0] == 'rule':
                rule = [lineString[1], lineString[2]]
                addRule(lsys, rule)

    fp.close()
    return lsys

def buildString( lsys, n ):
    ''' Return a string generated by applying the L-system rules with ruleIdx x for n iterations '''

    nstring = getBase(lsys)
    rule = getRule(lsys, 0)
    symbol = rule[0]
    replacement = rule[1]
    for i in range(n):
        nstring = nstring.replace(symbol, replacement)
    return nstring

def main(argv):
    if len(argv) < 3:
        print("Usage : python3 lsystem.py <in_filename> <num_iterations>")
        exit()

    lsys_filename = argv[1]
    lsys = createLsystemFromFile( lsys_filename )
    print(lsys)
										 
    num_iter = int( argv[2] )
    s = buildString( lsys, num_iter )
    print(s)

if __name__ == "__main__":
    main(sys.argv)